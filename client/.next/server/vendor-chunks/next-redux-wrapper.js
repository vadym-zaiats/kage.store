"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/next-redux-wrapper";
exports.ids = ["vendor-chunks/next-redux-wrapper"];
exports.modules = {

/***/ "(ssr)/./node_modules/next-redux-wrapper/es6/index.js":
/*!******************************************************!*\
  !*** ./node_modules/next-redux-wrapper/es6/index.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HYDRATE: () => (/* binding */ HYDRATE),\n/* harmony export */   createWrapper: () => (/* binding */ createWrapper),\n/* harmony export */   \"default\": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react_redux__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react-redux */ \"(ssr)/./node_modules/react-redux/es/index.js\");\n/* harmony import */ var next_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/router */ \"(ssr)/./node_modules/next/router.js\");\n/* harmony import */ var next_router__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_router__WEBPACK_IMPORTED_MODULE_2__);\nvar __assign = undefined && undefined.__assign || function() {\n    __assign = Object.assign || function(t) {\n        for(var s, i = 1, n = arguments.length; i < n; i++){\n            s = arguments[i];\n            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {\n    function adopt(value) {\n        return value instanceof P ? value : new P(function(resolve) {\n            resolve(value);\n        });\n    }\n    return new (P || (P = Promise))(function(resolve, reject) {\n        function fulfilled(value) {\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function rejected(value) {\n            try {\n                step(generator[\"throw\"](value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function step(result) {\n            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = undefined && undefined.__generator || function(thisArg, body) {\n    var _ = {\n        label: 0,\n        sent: function() {\n            if (t[0] & 1) throw t[1];\n            return t[1];\n        },\n        trys: [],\n        ops: []\n    }, f, y, t, g;\n    return g = {\n        next: verb(0),\n        \"throw\": verb(1),\n        \"return\": verb(2)\n    }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() {\n        return this;\n    }), g;\n    function verb(n) {\n        return function(v) {\n            return step([\n                n,\n                v\n            ]);\n        };\n    }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while(_)try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [\n                op[0] & 2,\n                t.value\n            ];\n            switch(op[0]){\n                case 0:\n                case 1:\n                    t = op;\n                    break;\n                case 4:\n                    _.label++;\n                    return {\n                        value: op[1],\n                        done: false\n                    };\n                case 5:\n                    _.label++;\n                    y = op[1];\n                    op = [\n                        0\n                    ];\n                    continue;\n                case 7:\n                    op = _.ops.pop();\n                    _.trys.pop();\n                    continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n                        _ = 0;\n                        continue;\n                    }\n                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n                        _.label = op[1];\n                        break;\n                    }\n                    if (op[0] === 6 && _.label < t[1]) {\n                        _.label = t[1];\n                        t = op;\n                        break;\n                    }\n                    if (t && _.label < t[2]) {\n                        _.label = t[2];\n                        _.ops.push(op);\n                        break;\n                    }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop();\n                    continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) {\n            op = [\n                6,\n                e\n            ];\n            y = 0;\n        } finally{\n            f = t = 0;\n        }\n        if (op[0] & 5) throw op[1];\n        return {\n            value: op[0] ? op[1] : void 0,\n            done: true\n        };\n    }\n};\nvar __rest = undefined && undefined.__rest || function(s, e) {\n    var t = {};\n    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++){\n        if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n    }\n    return t;\n};\n\n\n\n/**\n * Quick note on Next.js return types:\n *\n * Page.getInitialProps https://nextjs.org/docs/api-reference/data-fetching/getInitialProps\n * as-is\n *\n * App.getInitialProps: AppInitialProps https://nextjs.org/docs/advanced-features/custom-app\n * {pageProps: any}\n *\n * getStaticProps https://nextjs.org/docs/basic-features/data-fetching#getstaticprops-static-generation\n * {props: any}\n *\n * getServerSideProps https://nextjs.org/docs/basic-features/data-fetching#getserversideprops-server-side-rendering\n * {props: any}\n */ var HYDRATE = \"__NEXT_REDUX_WRAPPER_HYDRATE__\";\nvar getIsServer = function() {\n    return \"undefined\" === \"undefined\";\n};\nvar getDeserializedState = function(initialState, _a) {\n    var _b = _a === void 0 ? {} : _a, deserializeState = _b.deserializeState;\n    return deserializeState ? deserializeState(initialState) : initialState;\n};\nvar getSerializedState = function(state, _a) {\n    var _b = _a === void 0 ? {} : _a, serializeState = _b.serializeState;\n    return serializeState ? serializeState(state) : state;\n};\nvar sharedClientStore;\nvar initStore = function(_a) {\n    var _b, _c, _d;\n    var makeStore = _a.makeStore, _e = _a.context, context = _e === void 0 ? {} : _e;\n    var createStore = function() {\n        return makeStore(context);\n    };\n    if (getIsServer()) {\n        var req = ((_b = context) === null || _b === void 0 ? void 0 : _b.req) || ((_d = (_c = context) === null || _c === void 0 ? void 0 : _c.ctx) === null || _d === void 0 ? void 0 : _d.req);\n        if (req) {\n            // ATTENTION! THIS IS INTERNAL, DO NOT ACCESS DIRECTLY ANYWHERE ELSE\n            // @see https://github.com/kirill-konshin/next-redux-wrapper/pull/196#issuecomment-611673546\n            if (!req.__nextReduxWrapperStore) {\n                req.__nextReduxWrapperStore = createStore(); // Used in GIP/GSSP\n            }\n            return req.__nextReduxWrapperStore;\n        }\n        return createStore();\n    }\n    // Memoize the store if we're on the client\n    if (!sharedClientStore) {\n        sharedClientStore = createStore();\n    }\n    return sharedClientStore;\n};\nvar createWrapper = function(makeStore, config) {\n    if (config === void 0) {\n        config = {};\n    }\n    var makeProps = function(_a) {\n        var callback = _a.callback, context = _a.context, _b = _a.addStoreToContext, addStoreToContext = _b === void 0 ? false : _b;\n        return __awaiter(void 0, void 0, void 0, function() {\n            var store, nextCallback, initialProps, _c, state;\n            return __generator(this, function(_d) {\n                switch(_d.label){\n                    case 0:\n                        store = initStore({\n                            context: context,\n                            makeStore: makeStore\n                        });\n                        if (config.debug) {\n                            console.log(\"1. getProps created store with state\", store.getState());\n                        }\n                        // Legacy stuff - put store in context\n                        if (addStoreToContext) {\n                            if (context.ctx) {\n                                context.ctx.store = store;\n                            } else {\n                                context.store = store;\n                            }\n                        }\n                        nextCallback = callback && callback(store);\n                        _c = nextCallback;\n                        if (!_c) return [\n                            3 /*break*/ ,\n                            2\n                        ];\n                        return [\n                            4 /*yield*/ ,\n                            nextCallback(context)\n                        ];\n                    case 1:\n                        _c = _d.sent();\n                        _d.label = 2;\n                    case 2:\n                        initialProps = _c || {};\n                        if (config.debug) {\n                            console.log(\"3. getProps after dispatches has store state\", store.getState());\n                        }\n                        state = store.getState();\n                        return [\n                            2 /*return*/ ,\n                            {\n                                initialProps: initialProps,\n                                initialState: getIsServer() ? getSerializedState(state, config) : state\n                            }\n                        ];\n                }\n            });\n        });\n    };\n    var getInitialPageProps = function(callback) {\n        return function(context) {\n            return __awaiter(void 0, void 0, void 0, function() {\n                return __generator(this, function(_a) {\n                    switch(_a.label){\n                        case 0:\n                            // context is store — avoid double-wrapping\n                            if (\"getState\" in context) {\n                                return [\n                                    2 /*return*/ ,\n                                    callback && callback(context)\n                                ];\n                            }\n                            return [\n                                4 /*yield*/ ,\n                                makeProps({\n                                    callback: callback,\n                                    context: context,\n                                    addStoreToContext: true\n                                })\n                            ];\n                        case 1:\n                            return [\n                                2 /*return*/ ,\n                                _a.sent()\n                            ];\n                    }\n                });\n            });\n        };\n    };\n    var getInitialAppProps = function(callback) {\n        return function(context) {\n            return __awaiter(void 0, void 0, void 0, function() {\n                var _a, initialProps, initialState;\n                return __generator(this, function(_b) {\n                    switch(_b.label){\n                        case 0:\n                            return [\n                                4 /*yield*/ ,\n                                makeProps({\n                                    callback: callback,\n                                    context: context,\n                                    addStoreToContext: true\n                                })\n                            ];\n                        case 1:\n                            _a = _b.sent(), initialProps = _a.initialProps, initialState = _a.initialState;\n                            return [\n                                2 /*return*/ ,\n                                __assign(__assign({}, initialProps), {\n                                    initialState: initialState\n                                })\n                            ];\n                    }\n                });\n            });\n        };\n    };\n    var getStaticProps = function(callback) {\n        return function(context) {\n            return __awaiter(void 0, void 0, void 0, function() {\n                var _a, initialProps, initialState;\n                return __generator(this, function(_b) {\n                    switch(_b.label){\n                        case 0:\n                            return [\n                                4 /*yield*/ ,\n                                makeProps({\n                                    callback: callback,\n                                    context: context\n                                })\n                            ];\n                        case 1:\n                            _a = _b.sent(), initialProps = _a.initialProps, initialState = _a.initialState;\n                            return [\n                                2 /*return*/ ,\n                                __assign(__assign({}, initialProps), {\n                                    props: __assign(__assign({}, initialProps.props), {\n                                        initialState: initialState\n                                    })\n                                })\n                            ];\n                    }\n                });\n            });\n        };\n    };\n    var getServerSideProps = function(callback) {\n        return function(context) {\n            return __awaiter(void 0, void 0, void 0, function() {\n                return __generator(this, function(_a) {\n                    switch(_a.label){\n                        case 0:\n                            return [\n                                4 /*yield*/ ,\n                                getStaticProps(callback)(context)\n                            ];\n                        case 1:\n                            return [\n                                2 /*return*/ ,\n                                _a.sent()\n                            ];\n                    }\n                });\n            });\n        };\n    }; // just not to repeat myself\n    var hydrate = function(store, state) {\n        if (!state) {\n            return;\n        }\n        store.dispatch({\n            type: HYDRATE,\n            payload: getDeserializedState(state, config)\n        });\n    };\n    var hydrateOrchestrator = function(store, giapState, gspState, gsspState, gippState) {\n        var _a;\n        if (gspState) {\n            // If GSP has run, then gspState will _not_ contain the data from GIP (if it exists), because GSP is run at build time,\n            // and GIP runs at request time. So we have to hydrate the GIP data first, and then do another hydrate on the gspState.\n            hydrate(store, giapState);\n            hydrate(store, gspState);\n        } else if (gsspState || gippState || giapState) {\n            // If GSSP has run, then gsspState _will_ contain the data from GIP (if there is a GIP) and the GSSP data combined\n            // (see https://github.com/kirill-konshin/next-redux-wrapper/pull/499#discussion_r1014500941).\n            // If there is no GSP or GSSP for this page, but there is a GIP on page level (not _app), then we use the gippState.\n            // If there is no GSP or GSSP and no GIP on page level for this page, but there is a GIP on _app level, then we use the giapState.\n            hydrate(store, (_a = gsspState !== null && gsspState !== void 0 ? gsspState : gippState) !== null && _a !== void 0 ? _a : giapState);\n        }\n    };\n    var useHybridHydrate = function(store, giapState, gspState, gsspState, gippState) {\n        var events = (0,next_router__WEBPACK_IMPORTED_MODULE_2__.useRouter)().events;\n        var shouldHydrate = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(true);\n        // We should only hydrate when the router has changed routes\n        (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function() {\n            var handleStart = function() {\n                shouldHydrate.current = true;\n            };\n            events === null || events === void 0 ? void 0 : events.on(\"routeChangeStart\", handleStart);\n            return function() {\n                events === null || events === void 0 ? void 0 : events.off(\"routeChangeStart\", handleStart);\n            };\n        }, [\n            events\n        ]);\n        // useMemo so that when we navigate client side, we always synchronously hydrate the state before the new page\n        // components are mounted. This means we hydrate while the previous page components are still mounted.\n        // You might think that might cause issues because the selectors on the previous page (still mounted) will suddenly\n        // contain other data, and maybe even nested properties, causing null reference exceptions.\n        // But that's not the case.\n        // Hydrating in useMemo will not trigger a rerender of the still mounted page component. So if your selectors do have\n        // some initial state values causing them to rerun after hydration, and you're accessing deeply nested values inside your\n        // components, you still wouldn't get errors, because there's no rerender.\n        // Instead, React will render the new page components straight away, which will have selectors with the correct data.\n        (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(function() {\n            if (shouldHydrate.current) {\n                hydrateOrchestrator(store, giapState, gspState, gsspState, gippState);\n                shouldHydrate.current = false;\n            }\n        }, [\n            store,\n            giapState,\n            gspState,\n            gsspState,\n            gippState\n        ]);\n    };\n    // giapState stands for getInitialAppProps state\n    var useWrappedStore = function(_a, displayName) {\n        var _b, _c, _d, _e, _f, _g;\n        if (displayName === void 0) {\n            displayName = \"useWrappedStore\";\n        }\n        var giapState = _a.initialState, initialProps = _a.initialProps, props = __rest(_a, [\n            \"initialState\",\n            \"initialProps\"\n        ]);\n        // getStaticProps state\n        var gspState = (props === null || props === void 0 ? void 0 : props.__N_SSG) ? (_b = props === null || props === void 0 ? void 0 : props.pageProps) === null || _b === void 0 ? void 0 : _b.initialState : null;\n        // getServerSideProps state\n        var gsspState = (props === null || props === void 0 ? void 0 : props.__N_SSP) ? (_c = props === null || props === void 0 ? void 0 : props.pageProps) === null || _c === void 0 ? void 0 : _c.initialState : null;\n        // getInitialPageProps state\n        var gippState = !gspState && !gsspState ? (_e = (_d = props === null || props === void 0 ? void 0 : props.pageProps) === null || _d === void 0 ? void 0 : _d.initialState) !== null && _e !== void 0 ? _e : null : null;\n        if (config.debug) {\n            console.log(\"4.\", displayName, \"created new store with\", {\n                giapState: giapState,\n                gspState: gspState,\n                gsspState: gsspState,\n                gippState: gippState\n            });\n        }\n        var store = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(function() {\n            return initStore({\n                makeStore: makeStore\n            });\n        }, []);\n        useHybridHydrate(store, giapState, gspState, gsspState, gippState);\n        var resultProps = props;\n        // order is important! Next.js overwrites props from pages/_app with getStaticProps from page\n        // @see https://github.com/zeit/next.js/issues/11648\n        if (initialProps && initialProps.pageProps) {\n            resultProps.pageProps = __assign(__assign({}, initialProps.pageProps), props.pageProps);\n        }\n        // just some cleanup to prevent passing it as props, we need to clone props to safely delete initialState\n        if ((_f = props === null || props === void 0 ? void 0 : props.pageProps) === null || _f === void 0 ? void 0 : _f.initialState) {\n            resultProps = __assign(__assign({}, props), {\n                pageProps: __assign({}, props.pageProps)\n            });\n            delete resultProps.pageProps.initialState;\n        }\n        // unwrap getInitialPageProps\n        if ((_g = resultProps === null || resultProps === void 0 ? void 0 : resultProps.pageProps) === null || _g === void 0 ? void 0 : _g.initialProps) {\n            resultProps.pageProps = __assign(__assign({}, resultProps.pageProps), resultProps.pageProps.initialProps);\n            delete resultProps.pageProps.initialProps;\n        }\n        return {\n            store: store,\n            props: __assign(__assign({}, initialProps), resultProps)\n        };\n    };\n    var withRedux = function(Component) {\n        console.warn(\"/!\\\\ You are using legacy implementation. Please update your code: use createWrapper() and wrapper.useWrappedStore().\");\n        //TODO Check if pages/_app was wrapped so there's no need to wrap a page itself\n        var WrappedComponent = function(props) {\n            var _a = useWrappedStore(props, WrappedComponent.displayName), store = _a.store, combinedProps = _a.props;\n            return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(react_redux__WEBPACK_IMPORTED_MODULE_1__.Provider, {\n                store: store\n            }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(Component, __assign({}, combinedProps)));\n        };\n        WrappedComponent.displayName = \"withRedux(\".concat(Component.displayName || Component.name || \"Component\", \")\");\n        if (\"getInitialProps\" in Component) {\n            WrappedComponent.getInitialProps = Component.getInitialProps;\n        }\n        return WrappedComponent;\n    };\n    return {\n        getServerSideProps: getServerSideProps,\n        getStaticProps: getStaticProps,\n        getInitialAppProps: getInitialAppProps,\n        getInitialPageProps: getInitialPageProps,\n        withRedux: withRedux,\n        useWrappedStore: useWrappedStore\n    };\n};\n// Legacy\n// eslint-disable-next-line import/no-anonymous-default-export\n/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(makeStore, config) {\n    if (config === void 0) {\n        config = {};\n    }\n    console.warn(\"/!\\\\ You are using legacy implementation. Please update your code: use createWrapper() and wrapper.withRedux().\");\n    return createWrapper(makeStore, config).withRedux;\n}; //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/next-redux-wrapper/es6/index.js\n");

/***/ })

};
;